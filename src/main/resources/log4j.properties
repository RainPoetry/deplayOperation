
# DEBUG < INFO < WARN < ERROR < FATAL
log4j.rootLogger=INFO, stdout

#org.apache.log4j.ConsoleAppender（控制台）:
#       Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。
#       ImmediateFlush=true：表示所有消息都会被立即输出，设为false则不输出，默认值是true。
#       Target=System.err：默认值是System.out。
#org.apache.log4j.FileAppender（文件）:
#        Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。
#        ImmediateFlush=true：表示所有消息都会被立即输出，设为false则不输出，默认值是true。
#        Append=false：true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。
#        File=D:/logs/logging.log4j：指定消息输出到logging.log4j文件中。
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件）
#        Threshold=WARN：指定日志信息的最低输出级别，默认为DEBUG。
#        ImmediateFlush=true：表示所有消息都会被立即输出，设为false则不输出，默认值是true。
#        Append=false：true表示消息增加到指定文件中，false则将消息覆盖指定的文件内容，默认值是true。
#        File=D:/logs/logging.log4j：指定当前消息输出到logging.log4j文件中。
#        DatePattern='.'yyyy-MM：每月滚动一次日志文件，即每月产生一个新的日志文件。当前月的日志文件名为logging.log4j，前一个月的日志文件名为logging.log4j.yyyy-MM。
#        另外，也可以指定按周、天、时、分等来滚动日志文件，对应的格式如下：
#        1)'.'yyyy-MM：每月
#        2)'.'yyyy-ww：每周
#        3)'.'yyyy-MM-dd：每天
#        4)'.'yyyy-MM-dd-a：每天两次
#        5)'.'yyyy-MM-dd-HH：每小时
#        6)'.'yyyy-MM-dd-HH-mm：每分钟
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件）

#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=[%t] %-5p %c %x - %m%n

log4j.appender.Logging=org.apache.log4j.ConsoleAppender
log4j.appender.Logging.layout=org.apache.log4j.PatternLayout
log4j.appender.Logging.layout.ConversionPattern=[%t] %-5p %c %x - %m%n

#log4j.appender.Logging=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.Logging.DatePattern='.'yyyy-MM-dd-HH
#log4j.appender.Logging.File=F:/tmp/zk/server.log
#log4j.appender.Logging.layout=org.apache.log4j.PatternLayout
#log4j.appender.Logging.layout.ConversionPattern=[%d] %p %m (%c)%n

#%p：输出日志信息的优先级，即DEBUG，INFO，WARN，ERROR，FATAL。
#%d：输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，如：%d{yyyy/MM/dd HH:mm:ss,SSS}。
#%r：输出自应用程序启动到输出该log信息耗费的毫秒数。
#%t：输出产生该日志事件的线程名。
#%l：输出日志事件的发生位置，相当于%c.%M(%F:%L)的组合，包括类全名、方法、文件名以及在代码中的行数。例如：test.TestLog4j.main(TestLog4j.java:10)。
#%c：输出日志信息所属的类目，通常就是所在类的全名。
#%M：输出产生日志信息的方法名。
#%F：输出日志消息产生时所在的文件名称。
#%L:：输出代码中的行号。
#%m:：输出代码中指定的具体日志信息。
#%n：输出一个回车换行符，Windows平台为"rn"，Unix平台为"n"。
#%x：输出和当前线程相关联的NDC(嵌套诊断环境)，尤其用到像java servlets这样的多客户多线程的应用中。
#%%：输出一个"%"字符。